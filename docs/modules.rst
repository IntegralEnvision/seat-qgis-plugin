.. _modules:

Modules
=======

The behavior of the plugin depends on the input and is subdivided into 4 modules:
  
+-------------------------+---------------------------------------------------+
| Module                  | Description                                       |
+=========================+===================================================+
| **Shear Stress Module** | Analysis of spatial change in bed mobility        |
+-------------------------+---------------------------------------------------+
| **Velocity Module**     | Analysis of spatial change in larval motility     |
+-------------------------+---------------------------------------------------+
| **Acoustics Module**    | Analysis of acoustic propagation and thresholds   |
+-------------------------+---------------------------------------------------+
| **Power Module**        | Analysis of power generated by WEC/CEC array      |
+-------------------------+---------------------------------------------------+


Shear Stress Module
-------------------

The `shear_stress_module.py` a component of SEAT. It's aimed at assessing the impact of shear stressors on sediment mobility in aquatic environments. This module provides insights into how various devices or conditions can affect shear stress by allowing comparison between scenarios with and without these elements present.


Data
^^^^
Input 
""""""
- NetCDF files: Contain shear stress data for scenarios with and without devices present.
- Optional:
  - Receptor file: Contains critical shear stress values.
  - Probability/Boundary Condition file: Used to weight different run scenarios.

Output 
""""""
- GeoTIFF raster files: Visualize shear stress with and without devices, shear stress changes, and mobility classifications.
- CSV files: Contain statistics of area changes and mobility classifications.

Core Functions:
^^^^^^^^^^^^^^^

+--------------------------------------------+------------------------------------------------------------------+
| Function                                   | Description                                                      |
+============================================+==================================================================+
| ``critical_shear_stress()``                | Calculates critical shear stress from grain size.                |
+--------------------------------------------+------------------------------------------------------------------+
| ``classify_mobility()``                    | Classifies sediment mobility from device runs to no device runs. |
+--------------------------------------------+------------------------------------------------------------------+
| ``check_grid_define_vars()``               | Determines the type of grid and corresponding shear stress       |
|                                            | variable name and coordinate names.                              |
+--------------------------------------------+------------------------------------------------------------------+
| ``calculate_shear_stress_stressors()``     | Calculates the stressor layers as arrays from model and parameter|
|                                            | input.                                                           |
+--------------------------------------------+------------------------------------------------------------------+
| ``run_shear_stress_stressor()``            | Creates GeoTIFFs and area change statistics files for shear      |
|                                            | stress change.                                                   |
+--------------------------------------------+------------------------------------------------------------------+




Velocity Module
---------------

The `velocity_module.py` is a component of SEAT aimed at assessing the impact of velocity stressors on larval motility in aquatic environments. This module provides insights into how various devices or conditions can affect velocity by allowing comparison between scenarios with and without these elements present.

Data
^^^^
Input 
""""""
- NetCDF files: Contain velocity data for scenarios with and without devices present.
- Optional:

  * Receptor file: Contains critical velocity values.
  * Probability/Boundary Condition file: Used to weight different run scenarios.

Output 
""""""
- GeoTIFF raster files: Visualize velocity with and without devices, velocity changes, and motility classifications.
- CSV files: Contain statistics of area changes and motility classifications.


Core Functions:
^^^^^^^^^^^^^^^

+------------------------------------+-----------------------------------------------------------------------+
| Function                           | Description                                                           |
+====================================+=======================================================================+
| ``classify_motility()``            | This function classifies larval motility into various categories such |
|                                    | as Reduced, Increased, or New Motility based on the comparison of     |
|                                    | device runs and baseline (no device) runs.                            |
+------------------------------------+-----------------------------------------------------------------------+
| ``check_grid_define_vars()``       | Determines the type of grid (structured/unstructured) and defines     |
|                                    | corresponding velocity and coordinate variable names.                 |
+------------------------------------+-----------------------------------------------------------------------+
| ``calculate_velocity_stressors()`` | Main function that loads data, performs calculations, and computes    |
|                                    | various metrics including velocity differences and motility           |
|                                    | classifications.                                                      |
+------------------------------------+-----------------------------------------------------------------------+
| ``run_velocity_stressor()``        | Creates GeoTIFFs and CSV files to visualize and quantify velocity     |
|                                    | changes and motility classifications.                                 |
+------------------------------------+-----------------------------------------------------------------------+


Acoustics Module
----------------

The `acoustics_module.py` is a component of the SEAT aimed at assessing the impact of acoustic signal changes from paracoustic files. This module facilitates the understanding and visualization of how different acoustic variables alter in aquatic environments, especially when devices are present.

Data
^^^^
Input 
""""""
- NetCDF files: Contain acoustic data for scenarios with and without devices present.
- Optional:
  - Receptor file: Contains threshold values for acoustic variables.
  - Probability/Boundary Condition file: Used to weight different run scenarios.
  - Species files: Contains density or percent data of species.

Output 
""""""
- GeoTIFF raster files: Visualize calculated paracoustic, calculated stressor, threshold exceeded receptor, species percent and species density.
- CSV files: Contain statistics of area calculations for various layers.

Core Functions:
^^^^^^^^^^^^^^^

+--------------------------------------------+------------------------------------------------------------------+
| Function                                   | Description                                                      |
+============================================+==================================================================+
| ``create_species_array()``                 | Interpolates or creates an array of percent or density of species|
|                                            | from input files and coordinates.                                |
+--------------------------------------------+------------------------------------------------------------------+
| ``calculate_acoustic_stressors()``         | Calculates the stressor layers as arrays from model and parameter|
|                                            | input.                                                           |
+--------------------------------------------+------------------------------------------------------------------+
| ``run_acoustics_stressor()``               | Creates GeoTIFFs and area change statistics files for acoustic   |
|                                            | stressor change.                                                 |
+--------------------------------------------+------------------------------------------------------------------+
| ``redefine_structured_grid()``             | (From `stressor_utils`) Redefines grids to regular spacing, used |
|                                            | in `calculate_acoustic_stressors`.                               |
+--------------------------------------------+------------------------------------------------------------------+
| ``resample_structured_grid()``             | (From `stressor_utils`) Resamples grids, used in                 |
|                                            | `calculate_acoustic_stressors`.                                  |
+--------------------------------------------+------------------------------------------------------------------+


Power Module
------------

The `power_module.py` is a component of SEAT crafted to calculate the power output from a device array, providing a systematic means of evaluating and visualizing the spatial distribution, location, and power output from the devices in a specific marine environment.

Data
^^^^
Input 
""""""
- .OUT files: Contain power data for different scenarios.
- .pol file: Contains information on the obstacle polygon configurations.
- Optional:
  - Probability/Boundary Condition file: Used to weight different run scenarios.

Output 
""""""
- CSV files: Contain power data, obstacle matching data, and annual power per device.
- PNG files: Visualizations of obstacle locations, device number locations, total scaled power bars per run, scaled power per device per scenario, total scaled power per device, and device power heatmap.

Core Functions:
^^^^^^^^^^^^^^^

+--------------------------------------------+------------------------------------------------------------------+
| Function                                   | Description                                                      |
+============================================+==================================================================+
| ``read_obstacle_polygon_file()``           | Reads the obstacle polygon file to obtain xy coordinates of each |
|                                            | obstacle.                                                        |
+--------------------------------------------+------------------------------------------------------------------+
| ``find_mean_point_of_obstacle_polygon()``  | Calculates the center of each obstacle based on xy coordinates.  |
+--------------------------------------------+------------------------------------------------------------------+
| ``plot_test_obstacle_locations()``         | Creates a plot showing the spatial distribution and location of  |
|                                            | each obstacle.                                                   |
+--------------------------------------------+------------------------------------------------------------------+
| ``centroid_diffs()``                       | Determines the closest centroid pair among obstacles.            |
+--------------------------------------------+------------------------------------------------------------------+
| ``extract_device_location()``              | Creates a dictionary summary of each device location.            |
+--------------------------------------------+------------------------------------------------------------------+
| ``pair_devices()``                         | Determines the two intersecting obstacles that create a device.  |
+--------------------------------------------+------------------------------------------------------------------+
| ``create_power_heatmap()``                 | Creates a heatmap visualizing device location and power output.  |
+--------------------------------------------+------------------------------------------------------------------+
| ``read_power_file()``                      | Reads power file and extracts final set of converged data.       |
+--------------------------------------------+------------------------------------------------------------------+
| ``sort_data_files_by_runorder()``          | Sorts data files by run order based on boundary conditions data. |
+--------------------------------------------+------------------------------------------------------------------+
| ``sort_bc_data_by_runorder()``             | Sorts boundary condition data by run order.                      |
+--------------------------------------------+------------------------------------------------------------------+
| ``reset_bc_data_order()``                  | Resets the order of boundary condition data.                     |
+--------------------------------------------+------------------------------------------------------------------+
| ``calculate_power()``                      | Reads the power files, calculates the total annual power based   |
|                                            | on hydrodynamic probabilities, and saves data and visualizations.|
+--------------------------------------------+------------------------------------------------------------------+
