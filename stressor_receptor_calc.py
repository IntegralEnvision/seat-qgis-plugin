# -*- coding: utf-8 -*-
"""
/***************************************************************************
 StressorReceptorCalc
                                 A QGIS plugin
 This calculates a response layer from stressor and receptor layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-19
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Integral Consultsing
        email                : ependleton@integral-corp.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QTableWidgetItem, QGridLayout
from qgis.core import QgsProject, Qgis, QgsApplication, QgsVectorLayer, QgsMessageLog, QgsRasterLayer
from qgis.analysis import QgsRasterCalculator, QgsRasterCalculatorEntry

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .stressor_receptor_calc_dialog import StressorReceptorCalcDialog
import os.path
import csv, glob

class StressorReceptorCalc:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'StressorReceptorCalc_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Stressor Receptor Calculator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('StressorReceptorCalc', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/stressor_receptor_calc/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calculate a response layer from stressor and receptor layers'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Stressor Receptor Calculator'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def select_calc_type(self, fields):
        '''This loads in any inputs into a drop down selector '''
        calcname=self.dlg.comboBox.currentIndex()
        # set up table
        path = os.path.join(QgsApplication.qgisSettingsDirPath(),
        r"python\plugins\stressor_receptor_calc\inputs", fields[calcname] + ".csv")
        path = path.replace(os.sep, '/')
        self.loadcsv(path)
        
    
    def loadcsv(self, filename):
        with open(filename) as csvfile:
            data = csv.reader(csvfile)
            col = next(data)
            ncol = len(col)
            nrow = sum([1 for row in data])
            # move to first row of data
            csvfile.seek(0)
            next(data)
            self.dlg.tableWidget.setColumnCount(ncol)
            self.dlg.tableWidget.setRowCount(nrow)
            #grid = QGridLayout()
            #grid.addWidget(self.dlg.tableWidget, nrow, ncol);
            self.dlg.tableWidget.setHorizontalHeaderLabels(col)
            for i, row in enumerate(data):
                for j, item in enumerate(row):
                    self.dlg.tableWidget.setItem(i,j, QTableWidgetItem(item))
            
            self.dlg.tableWidget.resizeColumnsToContents()
                   
    def select_stressor_file(self):
        filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select Stressor Layer ","", '*.tif')
        self.dlg.lineEdit.setText(filename)
    
    def select_receptor1_file(self):
        filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select Receptor Layer 1","", '*.tif')
        self.dlg.lineEdit_2.setText(filename)
        
    def select_receptor2_file(self):
        filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select Receptor Layer 2","", '*.tif')
        self.dlg.lineEdit_3.setText(filename)
    
    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
        self.dlg, "Select output file ","", '*.tif')
        self.dlg.lineEdit_4.setText(filename)
        
    def raster_multi(self, r1, r2, opath):
        ''' Raster multiplication '''
        r1Layer  = QgsRasterLayer(r1, "r1")
        r2Layer  = QgsRasterLayer(r2, "r2")
        
        entries = []
        
        # Define band1
        rl = QgsRasterCalculatorEntry()
        rl.ref = 'r1@1'
        rl.raster = r1Layer
        rl.bandNumber = 1
        entries.append( rl )
        
        # Define band1
        r2l = QgsRasterCalculatorEntry()
        r2l.ref = 'r2@1'
        r2l.raster = r2Layer
        r2l.bandNumber = 1
        entries.append( r2l )
        
        calc = QgsRasterCalculator( 'r1@1 * r2@1', opath, 'GTiff', r1Layer.extent(), r1Layer.width(), r1Layer.height(), entries )
        calc.processCalculation()

        
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = StressorReceptorCalcDialog()
            # This connects the function to the combobox when changed
            self.dlg.comboBox.clear()
            # fields = ["North", "South", "East", "West", "Northwest"]
            path = os.path.join(QgsApplication.qgisSettingsDirPath(), r"python\plugins\stressor_receptor_calc\inputs")
            path = os.path.join(path,'*.{}'.format('csv'))
            path = path.replace(os.sep, '/')
            result = glob.glob(path)
            fields = sorted([os.path.basename(f).split(".csv")[0] for f in result])
            self.dlg.comboBox.addItems(fields)
            # set to the first field
            self.select_calc_type(fields)
            
            
            # This connects the function to the layer combobox when changed
            self.dlg.comboBox.currentIndexChanged.connect(lambda: self.select_calc_type(fields))

            # this connecta selecting the files. Since each element has a unique label seperate functions are used.
            
            self.dlg.pushButton.clicked.connect(self.select_stressor_file)
            self.dlg.pushButton_2.clicked.connect(self.select_receptor1_file)
            self.dlg.pushButton_3.clicked.connect(self.select_receptor2_file)
            self.dlg.pushButton_4.clicked.connect(self.select_output_file)
        
        self.dlg.lineEdit.clear()
        self.dlg.lineEdit_2.clear()
        self.dlg.lineEdit_3.clear()
        self.dlg.lineEdit_4.clear()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here
            # this grabs the files for input and output
            sfilename = self.dlg.lineEdit.text()
            r1filename = self.dlg.lineEdit_2.text()
            r2filename = self.dlg.lineEdit_3.text()
            ofilename = self.dlg.lineEdit_4.text()
            
            # this grabs the current Table Widget values
            calc_index=self.dlg.comboBox.currentIndex()
            min_rc = self.dlg.tableWidget.item(calc_index, 1).text()
            max_rc = self.dlg.tableWidget.item(calc_index, 2).text()
             
            #QgsMessageLog.logMessage(min_rc + " , " + max_rc, level =Qgis.MessageLevel.Info)
            
            #self.dlg.tableWidget.findItems(i,j, QTableWidgetItem(item))
            
            self.raster_multi(sfilename, r1filename, ofilename)
            
            # add a layer to map
            basename = os.path.splitext(os.path.basename(QgsVectorLayer(ofilename).source()))[0]
            layer = QgsProject.instance().addMapLayer(QgsVectorLayer(ofilename, basename))
    
